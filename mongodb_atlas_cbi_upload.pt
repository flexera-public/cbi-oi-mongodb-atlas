name 'MongoDB Atlas CBI Upload'
rs_pt_ver 20180301
short_description 'Translate MongoDB Atlas invoices to the Flexera Common Bill Ingest CVS format and upload it into the platform.'
default_frequency 'daily'
category 'Cost'
info(
  version: '1.0',
  provider: 'MongoDB Atlas',
)

parameter 'param_mongodb_atlas_org_id' do
  type 'string'
  label 'MongoDB Atlas Organization ID'
  category 'MongoDB Atlas'
  description 'The ID of the MongoDB Atlas organization for downloading invoices'
  allowed_pattern /^[0-9a-f]{24}$/i
end

parameter 'param_months' do
  type 'number'
  label 'Months'
  category 'MongoDB Atlas'
  description 'The number of months back for downloading invoices'
  default 3
  min_value 1
end

parameter 'param_bill_connect_id' do
  type 'string'
  label 'Bill Connect ID'
  category 'Flexera'
  description 'The ID of the CBI Bill Connect for uploading bills'
  allowed_pattern /^cbi-oi-optima-[-_0-9a-zA-Z]{1,20}$/
end

parameter 'param_emails' do
  type 'list'
  label 'Email Addresses'
  category 'Notification'
  description 'The list of email addresses to notify'
end

credentials 'creds_mongodb_atlas' do
  schemes 'digest'
  label 'MongoDB Atlas'
  description 'The credentials to authenticate API calls to download invoices'
  tags 'provider=mongodb_atlas'
end

credentials 'creds_flexera' do
  schemes 'oauth2'
  label 'Flexera'
  description 'The credentials to authenticate API calls to upload bills'
  tags 'provider=flexera'
end

pagination 'pagination_mongodb_atlas' do
  get_page_marker do
    body_path jq(response, '.links[] | select(.rel == "next").href')
  end
  set_page_marker do
    uri true
  end
end

datasource 'ds_mongodb_atlas_org_groups' do
  request do
    auth $creds_mongodb_atlas
    pagination $pagination_mongodb_atlas
    host 'cloud.mongodb.com'
    path join(['/api/atlas/v1.0/orgs/', $param_mongodb_atlas_org_id, '/groups'])
    query 'itemsPerPage', '500'
  end
  result do
    collect jq(response, '.results[]') do
      field 'id', from(col_item)
      field 'name', from(col_item)
    end
  end
end

datasource 'ds_mongodb_atlas_org_invoices_index' do
  request do
    auth $creds_mongodb_atlas
    pagination $pagination_mongodb_atlas
    host 'cloud.mongodb.com'
    path join(['/api/atlas/v1.0/orgs/', $param_mongodb_atlas_org_id, '/invoices/'])
    query 'itemsPerPage', '500'
  end
  result do
    collect jq(response, '.results[]') do
      field 'id', from(col_item)
      field 'startDate', from(col_item)
    end
  end
end

datasource 'ds_mongodb_atlas_org_invoices_for_last_n_months' do
  run_script $js_mongodb_atlas_org_invoices_for_last_n_months, $param_months, $ds_mongodb_atlas_org_invoices_index
end

datasource 'ds_mongodb_atlas_org_invoices' do
  iterate $ds_mongodb_atlas_org_invoices_for_last_n_months
  request do
    auth $creds_mongodb_atlas
    pagination $pagination_mongodb_atlas
    host 'cloud.mongodb.com'
    path join(['/api/atlas/v1.0/orgs/', $param_mongodb_atlas_org_id, '/invoices/', val(iter_item, 'id')])
  end
  result do
    field 'id', from(response)
    field 'startDate', from(response)
    field 'lineItems' do
      collect jq(response, '.lineItems[]') do
        field 'startDate', from(col_item)
        field 'endDate', from(col_item)
        field 'groupId', from(col_item)
        field 'clusterName', from(col_item)
        field 'note', from(col_item)
        field 'sku', from(col_item)
        field 'discountCents', from(col_item)
        field 'percentDiscount', from(col_item)
        field 'quantity', from(col_item)
        field 'totalPriceCents', from(col_item)
        field 'unit', from(col_item)
        field 'unitPriceDollars', from(col_item)
      end
    end
  end
end

datasource 'ds_mongodb_atlas_cbi_uploads' do
  run_script $js_mongodb_atlas_cbi_uploads, $ds_mongodb_atlas_org_groups, $ds_mongodb_atlas_org_invoices
end

datasource 'ds_create_bill_upload' do
  iterate $ds_mongodb_atlas_cbi_uploads
  request do
    auth $creds_flexera
    host rs_optima_host
    verb 'POST'
    path join(['/optima/orgs/', rs_org_id, '/billUploads'])
    body_field 'billConnectId', $param_bill_connect_id
    body_field 'billingPeriod', val(iter_item, 'period')
  end
  result do
    field 'id', from(response)
    field 'period', from(iter_item)
    field 'recordCount', from(iter_item)
    field 'csv', from(iter_item)
    field 'csvSize', from(iter_item)
  end
end

datasource 'ds_upload_file_to_bill_upload' do
  iterate $ds_create_bill_upload
  request do
    auth $creds_flexera
    host rs_optima_host
    verb 'POST'
    path join(['/optima/orgs/', rs_org_id, '/billUploads/', val(iter_item, 'id'), '/files/bill-', val(iter_item, 'period'), '.csv'])
    body val(iter_item, 'csv')
  end
  result do
    field 'id', from(iter_item)
    field 'period', from(iter_item)
    field 'recordCount', from(iter_item)
    field 'csvSize', from(iter_item)
  end
end

datasource 'ds_commit_bill_upload' do
  iterate $ds_upload_file_to_bill_upload
  request do
    auth $creds_flexera
    host rs_optima_host
    verb 'POST'
    path join(['/optima/orgs/', rs_org_id, '/billUploads/', val(iter_item, 'id'), '/operations'])
    body_field 'operation', 'commit'
  end
  result do
    field 'period', from(iter_item)
    field 'recordCount', from(iter_item)
    field 'csvSize', from(iter_item)
  end
end

script 'js_mongodb_atlas_org_invoices_for_last_n_months', type: 'javascript' do
  parameters 'months', 'invoicesIndex'
  result 'invoices'
  code <<-'EOS'
  // get the last n months of invoices from the index
  var invoices = _.last(_.sortBy(invoicesIndex, 'startDate'), months);
  EOS
end

script 'js_mongodb_atlas_cbi_uploads', type: 'javascript' do
  parameters 'groups', 'invoices'
  result 'uploads'
  code <<-'EOS'
  // create a map of group (project) names by ID so they can be used in the CBI CSV output
  var groupNamesByID = {};

  _.each(groups, function (group) {
    groupNamesByID[group.id] = group.name;
  });

  var yearMonthRE = /^(\d+)-(\d+)-.+$/;
  var quoteRE = /[,"\r\n]|^\s/;
  var periodRE = /^(\d+-\d+)-.+$/;
  var trailingZeroRE = /\.0$/;
  var uploads = _.compact(_.map(invoices, function (invoice) {
    // get the year and month for the invoice in YYYYMM format for use in the CBI CSV output
    var yearMonth = invoice.startDate.replace(yearMonthRE, '$1$2');
    var csv = '';

    // build up the CBI CSV from the line items
    _.each(invoice.lineItems, function (lineItem, index) {
      var item = {
        CloudVendorAccountID: lineItem.groupId,
        CloudVendorAccountName: groupNamesByID[lineItem.groupId],
        ResourceID: lineItem.clusterName,
        UsageType: lineItem.sku,
        UsageAmount: lineItem.quantity,
        UsageUnit: lineItem.unit,
        Cost: lineItem.totalPriceCents / 100,
        CurrencyCode: 'USD',
        UsageStartTime: lineItem.startDate,
        InvoiceYearMonth: yearMonth,
        InvoiceID: invoice.id,
      }
      var columns = _.keys(item);

      // add the header row just before adding the first line item row
      if (index == 0) {
        csv += columns.join(',') + '\n';
      }

      // add the line item row
      csv += _.map(columns, function(column) {
        var value = item[column];

        if (value != null) {
          // quote and escape values properly for CSV
          if (typeof (value) == 'string' && value.match(quoteRE) != null) {
            return '"' + value.replace('"', '""') + '"';
          }

          return value;
        }

        return '';
      }).join(',') + '\n';
    });

    if (csv.length > 0) {
      // get the human readable size of the CSV
      var csvSize;

      if (csv.length >= 1024) {
        var exponent = Math.floor(Math.log(csv.length) / Math.log(1024));

        csvSize = (csv.length / Math.pow(1024, exponent)).toFixed(1).replace(trailingZeroRE, '') + ' ' + 'kMGTP'.charAt(exponent - 1) + 'iB';
      } else {
        csvSize = csv.length + ' B';
      }

      return {
        // get the year and month in YYYY-MM format for use with the CBI upload API
        period: invoice.startDate.replace(periodRE, '$1'),
        recordCount: invoice.lineItems.length,
        csv: csv,
        csvSize: csvSize,
      };
    }
  }));
  EOS
end

policy 'mongodb_atlas_cbi_upload' do
  validate $ds_commit_bill_upload do
    summary_template 'MongoDB Atlas CBI Upload'
    detail_template <<-'EOS'
Uploading the following MongoDB Atlas invoice data to CBI:

| Month         | Records            | CSV Size       |
| ------------- | ------------------ | -------------- |
{{ range data -}}
| {{ .period }} | {{ .recordCount }} | {{ .csvSize }} |
{{ end }}
EOS
    escalate $escalation_cbi_upload
    resolve $resolution_email
    check eq(size(data), 0)
  end
end

escalation 'escalation_cbi_upload' do
  automatic true
  resolve_incident
end

resolution 'resolution_email' do
  automatic true
  email $param_emails do
    subject_template 'MongoDB Atlas CBI Upload Completed'
  end
end
